// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  abbreviation String
  items        Item[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}



model Warehouse {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  warehouseType       String
  location            String?
  description         String?
  addStockAdjustments AddStockAdjustment[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Item {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  sku          String?
  barcode      String?
  quantity     Int      @default(0)
  unitId       String   @db.ObjectId
  unit         Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  brandId      String   @db.ObjectId
  brand        Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  categoryId   String   @db.ObjectId
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  unitPrice    Float
  sellingPrice Float
  buyingPrice  Float
  reorderPoint Int?
  imageUrl     String?
  dimensions   String?
  taxRate      Float?
  notes        String?
  weight       Float?
  warehouseId  String?
  addStockAdjustments      AddStockAdjustment[]
  transferStockAdjustments TransferStockAdjustment[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AddStockAdjustment {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber  String
  addStockQuantity Int
  itemId           String    @db.ObjectId
  item             Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  warehouseId      String    @db.ObjectId
  warehouse        Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model TransferStockAdjustment {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber       String
  transferStockQuantity Int
  itemId                String     @db.ObjectId
  item                  Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  givingWarehouseId     String
  receivingWarehouseId  String
  notes                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}
