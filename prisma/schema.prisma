// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  MANAGER
  STAFF
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String        @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role          @default(STAFF)
  accounts      Account[]
  sessions      Session[]
  activityLogs  ActivityLog[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  abbreviation String
  items        Item[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}



model Warehouse {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  warehouseType       String
  location            String?
  description         String?
  addStockAdjustments AddStockAdjustment[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Item {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  sku          String?
  barcode      String?
  quantity     Int      @default(0)
  reOrderPoint Int      @default(0)
  unitId       String   @db.ObjectId
  unit         Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  brandId      String   @db.ObjectId
  brand        Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  categoryId   String   @db.ObjectId
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  unitPrice    Float
  sellingPrice Float
  buyingPrice  Float
  reorderPoint Int?
  imageUrl     String?
  dimensions   String?
  taxRate      Float?
  notes        String?
  weight       Float?
  warehouseId  String?
  addStockAdjustments      AddStockAdjustment[]
  transferStockAdjustments TransferStockAdjustment[]
  sales                    SaleItem[]
  returns                  ReturnItem[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AddStockAdjustment {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber  String
  addStockQuantity Int
  itemId           String    @db.ObjectId
  item             Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  warehouseId      String    @db.ObjectId
  warehouse        Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model TransferStockAdjustment {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber       String
  transferStockQuantity Int
  itemId                String     @db.ObjectId
  item                  Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  givingWarehouseId     String
  receivingWarehouseId  String
  notes                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

model Sale {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber String     @unique
  totalAmount     Float
  items           SaleItem[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model SaleItem {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  saleId       String @db.ObjectId
  sale         Sale   @relation(fields: [saleId], references: [id], onDelete: Cascade)
  itemId       String @db.ObjectId
  item         Item   @relation(fields: [itemId], references: [id], onDelete: Restrict)
  quantitySold Int
  pricePerItem Float

  @@unique([saleId, itemId])
}

model StockReturn {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber String       @unique
  totalAmount     Float
  items           ReturnItem[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model ReturnItem {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  returnId         String      @db.ObjectId
  return           StockReturn @relation(fields: [returnId], references: [id], onDelete: Cascade)
  itemId           String      @db.ObjectId
  item             Item        @relation(fields: [itemId], references: [id], onDelete: Restrict)
  quantityReturned Int
  reason           String?
}

enum ActivityLevel {
  INFO
  WARNING
  ERROR
}

enum ActivityCategory {
  AUTHENTICATION
  USER
  ITEM
  INVENTORY
  SALES
  PURCHASE
  DATABASE
  SYSTEM
  API
}

model ActivityLog {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  timestamp   DateTime         @default(now())
  level       ActivityLevel
  category    ActivityCategory
  action      String           // e.g., "CREATE", "UPDATE", "DELETE", "LOGIN", "LOGOUT"
  message     String           // Human readable message
  details     String?          // Additional details (JSON string)
  userId      String?          @db.ObjectId
  user        User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  ip          String?          // IP address
  userAgent   String?          // User agent string
  entityType  String?          // e.g., "Item", "Sale", "User"
  entityId    String?          // ID of the affected entity
  oldValues   String?          // Previous values (JSON string)
  newValues   String?          // New values (JSON string)
  createdAt   DateTime         @default(now())

  @@index([timestamp])
  @@index([level])
  @@index([category])
  @@index([userId])
}
